📌 Flutter + Flask 기반 프로젝트 감사 관리 앱 개발 계획서 (RPD, 수정됨)
✅ 목표
네트워크 드라이브의 프로젝트 데이터를 Flask 서버에서 분석하고 감사한 결과를 Flutter 앱에서 
조회 및 표시하는 시스템 개발. Flutter 앱은 디스플레이 역할로 제한되며, 
서버 없이도 GitHub에서 저장된 감사 결과를 조회 가능.

✅ 개발 환경
Flutter (Desktop & Mobile): UI 및 데이터 디스플레이.
Flask (Python API): 프로젝트 데이터 수집, 감사 실행, AI 분석.(별도수행)
GitHub 연동: 원격 데이터 저장 및 조회(서버 없이도 동작 가능).
📍 1. 프로젝트 개요
🎯 주요 기능
Flask 서버:
네트워크 드라이브(Z:\)에서 프로젝트 데이터 수집 및 감사.
AI 분석(Gemini) 포함, 감사 결과를 JSON으로 저장.
감사 결과 저장 및 GitHub에 업로드.
Flutter 앱:
Flask 서버 또는 GitHub에서 감사 결과를 가져와 디스플레이.
대시보드 모드: 부서별 감사 결과 조회.
파일 탐색기 모드: 프로젝트별 문서 구조 확인(정적 데이터 표시).
오프라인 모드: GitHub에서 저장된 감사 결과를 조회.
GitHub 연동:
감사 결과를 static/results/와 static/report/에 저장하고, Flutter 앱에서 GitHub API로 데이터를 가져옴.
서버 없이도 기존 감사 결과를 조회 가능.
📍 2. 개발 단계 및 일정
💡 1단계씩 직접 눈으로 확인하며 개발 → 테스트 & 피드백 후 개선.

🚀 1단계: 기본 구조 개발 (기본 데이터 불러오기 & 트리뷰 구성)
✅ 목표:
Flutter 앱을 실행하면 GitHub 또는 Flask 서버에서 프로젝트 감사 데이터를 가져와 표시.
트리뷰 UI로 프로젝트별 문서 구조를 정적으로 표시.
✅ 구현 내용:
Flutter:
file_explorer_screen.dart: GitHub 또는 Flask API에서 audit_<project_id>.json 데이터를 가져와 트리뷰로 표시.
file_service.dart: GitHub API 호출(github_service.dart) 또는 Flask API 호출(api_service.dart)로 데이터 로드.
file_model.dart: 프로젝트 및 문서 데이터를 모델로 정의(Project, FileNode).
tree_view.dart: flutter_treeview로 트리 구조 UI 구현(폴더 및 파일 표시).
테스트: GitHub에서 audit_20240178.json을 로드해 트리뷰에 표시. 클릭 시 하위 문서 펼침 확인.
Flask:
app.py에서 /audit_project/<project_id> 엔드포인트를 유지하며, GitHub에 결과 저장 로직 추가(이전 제안 참고).
audit_service.py: save_to_github로 감사 결과를 GitHub에 업로드.
GitHub:
static/results/audit_<project_id>.json과 
static/report/combined_report.csv를 GitHub에 저장.


예시 데이터:
GitHub에서 audit_20240178.json 로드:

static/results/06010_환경사업부/audit_20240178.json
[
  {
    "project_id": "C20240178",
    "project_name": "월곶~판교 복선전철 건설사업(제2~5, 7, 9~10공구) 사후환경영향조사용역",
    "department": "06010_환경사업부",
    "status": "진행",
    "contractor": "주관사",
    "documents": {
      "contract": {
        "exists": true,
        "details": [
          {
            "type": "file",
            "name": "_월곶_판교 복선전철 건설사업(제2_5 7 9_10공구) 사후환경영향조사용역_ 낙찰자 결정 알림 및 계약체결 요청.hwp",
            "path": "_월곶_판교 복선전철 건설사업(제2_5 7 9_10공구) 사후환경영향조사용역_ 낙찰자 결정 알림 및 계약체결 요청.hwp",
            "full_path": "Z:06010_환경\\2팀\\02.사후환경영향조사\\20240178ㅣ월곶_판교 복선전철 건설사업(제2_5, 7, 9_10공구) 사후환경영향조사용역\\01. 행정\\01. 계약\\_월곶_판교 복선전철 건설사업(제2_5 7 9_10공구) 사후환경영향조사용역_ 낙찰자 결정 알림 및 계약체결 요청.hwp",
            "depth": 2,
            "doc_type": "contract"
          },
  },
  "ai_analysis": "문서 분석 결과 ...",  --> 이걸 플러터 웹앱의 오른쪽 패널에 표시
  "timestamp": "2025-03-05 21:31:29"
}


static/report/combined_report.csv 예시
ProjectID,ProjectName,Depart,Status,Contractor,ProjectID_numeric,Depart_ProjectID,search_folder,contract_exists,specification_exists,initiation_exists,agreement_exists,budget_exists,deliverable1_exists,deliverable2_exists,completion_exists,certificate_exists,evaluation_exists,contract_count,specification_count,initiation_count,agreement_count,budget_count,deliverable1_count,deliverable2_count,completion_count,certificate_count,evaluation_count
C20240178,"월곶~판교 복선전철 건설사업(제2~5, 7, 9~10공구) 사후환경영향조사용역",환경사업부,진행,주관사,20240178,06010_C20240178,"06010_환경\2팀\02.사후환경영향조사\20240178ㅣ월곶_판교 복선전철 건설사업(제2_5, 7, 9_10공구) 사후환경영향조사용역",1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,1




🚀 2단계: Flask 연동 (웹 & GitHub 데이터 관리)
✅ 목표:
Flask 서버에서 네트워크 드라이브 데이터를 수집하고, GitHub에 저장된 데이터를 Flutter 앱에서 조회.
서버 없이도 GitHub 데이터를 활용해 오프라인 조회 가능.
✅ 구현 내용:
Flask:
app.py: /audit_project/<project_id>로 프로젝트 감사 실행, GitHub에 결과 저장(save_to_github).
audit_service.py: 네트워크 드라이브에서 데이터 검색, AI 분석(Gemini) 수행, JSON 저장.
github_service.py: GitHub API로 데이터 업로드 및 다운로드.
Flutter:
api_service.dart: Flask API(/audit_project/<project_id>) 호출로 실시간 데이터 가져오기.
github_service.dart: GitHub에서 audit_<project_id>.json 로드.
offline_mode_screen.dart: GitHub 데이터로 오프라인 조회 구현.
테스트: Flask 서버에서 "20240178" 프로젝트 감사를 실행하고, Flutter 앱에서 
GitHub 데이터와 Flask API 데이터를 비교.

GitHub:
static/results/와 static/report/ 디렉토리에 감사 결과 저장, Flutter 앱에서 다운로드.
🚀 3단계: 감사 기능 구현 (AI 분석 포함, Flutter는 결과만 표시)
✅ 목표:
Flask 서버에서 모든 프로젝트 감사를 수행하고, Flutter 앱은 결과를 조회 및 표시.
AI 분석 결과를 GitHub에 저장하고, Flutter에서 표시.
✅ 구현 내용:
Flask:
audit_service.py:  대량 프로젝트 감사 실행, Gemini AI 분석 포함.
app.py: /audit_project/<project_id>와 /audit_all 엔드포인트 추가(선택적).
GitHub에 결과 저장 및 Discord 알림 전송.
Flutter:
GitHub에서 감사 결과를 가져와 AI 분석 결과 표시.
audit_service.dart: Flask API 또는 GitHub API 호출로 데이터 로드.
테스트: "20240178" 프로젝트를 Flask에서 감사 실행하고, Flutter 앱에서 AI 분석 결과를 표시.
🚀 4단계: 대시보드 & 파일 탐색기 모드 구현
✅ 목표:
Flutter에서 
왼쪽패널은 파일 탐색기 모드(프로젝트별 문서 구조) 구현.
오른쪽패널은 왼쪽 패널에서 프로젝트를 클릭하면 -->감사 보고서 출력
서버 없이 GitHub 데이터를 활용해 오프라인 조회 가능.



my_folder_app/
└── my_flutter_app/  # Flutter 앱 루트
    ├── lib/  # 주요 Flutter 코드
    │   ├── main.dart  # 앱 실행 진입점
    │   │
    │   ├── screens/  # 화면 UI
    │   │   ├── chat_screen.dart  # 감사보고서를 오른쪽 패널의 채팅창에 보냄
    │   │   ├── file_explorer_screen.dart  # 트리뷰 기반 파일 탐색기
    │   │
    │   ├── services/  # 데이터 처리 & 네트워크 통신
    │   │   ├── api_service.dart  # GitHub에서 데이터 가져오기
    │   │   ├── chat_service.dart  # GitHub에서 데이터 가져오기
    │   │   ├── file_explorer_service.dart  # 프로젝트 데이터 로드(부서-프로젝트-성과)
    │   │
    │   ├── widgets/  # 재사용 가능한 UI 위젯
    │   │   ├── chat_widget.dart  # 챗 위젯
    │   │   ├── tree_view.dart  # 트리뷰 UI (파일 & 폴더)
    │   │
    │   ├── models/  # 데이터 모델
    │   │   ├── project_model.dart  # 프로젝트 정보
    │   │   ├── file_node.dart  # 파일 & 폴더 정보
    │   │   ├── audit_report_model.dart  # 감사 보고서
    │   │
    │   ├── main.dart  # 앱 실행 엔트리 포인트
    │
    ├── assets/  # 정적 리소스
    │   ├── icons/
    │   ├── fonts/
    │   ├── images/
    │
    │
    ├── pubspec.yaml  # 패키지 설정
    ├── README.md  # 프로젝트 설명


# my-folder-app
|   .env
|   .gitignore
|   app.py
|   bot.py
|   folder.txt
|   README.md
|   requirements.txt
|   tree.txt
|   
+---.idx
+---.venv : python 3.12
|           
+---my-flask-app
|   |   audit_service.py # 감사를 하기 위한 마스터 파이썬 모듈
|   |   audit_target_generator.py  # 감사를 위한 타겟 프로젝트을 추출해서 리스트를 만듬
|   |   config.py  # 설정 모듈

        # Google API 설정
        GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY', '')

        # 프로젝트 루트 경로
        PROJECT_ROOT = os.path.abspath(os.path.dirname(os.path.dirname(__file__)))
        STATIC_PATH = os.path.join(PROJECT_ROOT, 'static')
        STATIC_DATA_PATH = os.path.join(PROJECT_ROOT, 'static', 'data')
        STATIC_IMAGES_PATH = os.path.join(PROJECT_ROOT, 'static', 'images')
        PROJECT_LIST_CSV = os.path.join(STATIC_DATA_PATH, 'project_list.csv')
        DEPART_LIST_PATH = os.path.join(STATIC_DATA_PATH, 'depart_list.csv')
        AUDIT_TARGETS_CSV = os.path.join(STATIC_DATA_PATH, 'audit_targets.csv')  # 감사 대상 CSV 경로 추가
        CONTRACT_STATUS_CSV = os.path.join(STATIC_DATA_PATH, 'contract_status.csv')
        RESULTS_DIR = os.path.join(STATIC_PATH, 'results')

				# 기본값 설정
				_NETWORK_DRIVE_CACHE = 'Z:'
				

        # Discord 설정
        DISCORD_BOT_TOKEN = os.getenv('DISCORD_BOT_TOKEN')
        DISCORD_CHANNEL_ID = int(os.getenv('DISCORD_CHANNEL_ID', '0'))
        DISCORD_WEBHOOK_URL = os.getenv('DISCORD_WEBHOOK_URL')
        GITHUB_TOKEN = os.getenv('GITHUB_TOKEN')

|   |   config_assets.py # 프로젝트의 분류를 하기 위한 설정

        # 검색 대상 문서 유형
        DOCUMENT_TYPES = {
            'contract': {'name': '계약서', 'keywords': ['계약서', '변경계약서', '계약', 'contract']},
            'specification': {'name': '과업지시서', 'keywords': ['과업지시', '과업', '내용서', 'specification']},
            'initiation': {'name': '착수계', 'keywords': ['착수', '착수계', 'initiation']},
            'agreement': {'name': '공동도급협정', 'keywords': ['분담', '협정', '협약', 'agreement']},    
            'budget': {'name': '실행예산', 'keywords': ['실행', '실행예산', 'budget']},
            'deliverable1': {'name': '성과품(보고서)', 'keywords': ['성과품', '성과', '보고서', '1장', 'deliverable1']},
            'deliverable2': {'name': '성과품(도면)', 'keywords': ['성과품', '성과', '도면', '일반도', '평면도', 'deliverable2']},
            'completion': {'name': '준공계', 'keywords': ['준공', '준공계', 'completion']},
            'certificate': {'name': '실적증명', 'keywords': ['실적증명', '증명', 'certificate']},
            'evaluation': {'name': '용역수행평가', 'keywords': ['용역수행평가', '용역수행', 'evaluation']}
        }

        # 부서 매핑 (PM부서 → department_code)
        DEPARTMENT_MAPPING = {
            '도로부': '01010',
            '공항및인프라사업부': '01020',
            '구조부': '01030',
            '지반부': '01040',
            '교통부': '01050',
            '안전진단부': '01060',
            '도시철도부': '02010',
            '철도설계부': '03010',
            '철도건설관리부': '03020',
            '도시계획부': '04010',
            '도시설계부': '04020',
            '조경부': '04030',
            '수자원부': '05010',
            '환경사업부': '06010',
            '상하수도부': '07010',
            '항만부': '07020',  # 항만부 코드 변경
            '건설사업관리부': '08010',
            '해외영업부': '09010',  
            '플랫폼사업실': '10010',
            '기술지원실': '11010',
            '수성엔지니어링': '99999'  # 예비 부서
        }

        # 감사 대상 필터링 설정
        AUDIT_FILTERS = {
            'status': ['준공', '진행'],  # 진행 상태 필터 (다중 값 가능: '준공', '진행', '중지', '탈락')
                                        # - '준공': 성과품 완벽히 포함해야 함 (주관사 100%, 비주관사 최소 필요)
                                        # - '진행': 성과품 미완성 가능
                                        # - '중지': 진행보다 미흡한 상태, 성과품 누락 가능
                                        # - '탈락': 입찰 탈락, 감사 제외 가능
            'is_main_contractor': ['주관사', '비주관사'],  # 
                                                        # 주관사 여부
                                                        # - '주관사': 모든 자료 완비 (100% 문서 필요)
                                                        # - '비주관사': 최소 필요 자료만 있음
            'year': [2024],  # 준공 연도 필터 (다중 값 가능, 최근 준공 프로젝트 감사)
            'department': None  # 기본값 없음, AUDIT_FILTERS_depart 참조
        }

        # 부서 필터링 (한글 부서명으로 설정, 기본값으로 모든 부서 포함)
        AUDIT_FILTERS_depart = [
            '도로부',
            '공항및인프라사업부',
            '구조부',
            '지반부',
            '교통부',
            '안전진단부',
            '도시철도부',
            '철도설계부',
            '철도건설관리부',
            '도시계획부',
            '도시설계부',
            '조경부',
            '수자원부',
            '환경사업부',
            '상하수도부',
            '항만부',
            # '건설사업관리부',
            '해외영업부',
            '플랫폼사업실',
]

|   |   gemini.py  # 감사 결과를 AI로 분석
|   |   get_data.py # 감사 전 네트워크 드라이브에서 감사를 하기 위한 프로젝트 폴더를 추출하는 모듈
|   |   get_project.py # 프로젝트의 정보를 알아보기(디스코드 명령 "project 20240178")
|   |   git_operations.py # 파일 자동 푸시, 업로드
|   |   search_project_data.py # 네트워크 드라이브에 있는 프로젝트 폴더에서 문서를 검색(컨피그에 있는 문서와 매치되는 문서가 있는 지 검색)
|   |   



📍 8. 구현 세부사항
🚀 1단계: 기본 구조 개발
Flutter:
file_explorer_screen.dart에서 GitHub(github_service.dart)에서 audit_20240178.json을 로드해 트리뷰로 표시.

테스트: GitHub에서 audit_20240178.json을 로드해 트리뷰에 표시. 폴더 및 파일 클릭 시 펼침 확인.

🚀 2단계: Flask 연동(현재는 플라스크에서 감사 실행)
Flask:
app.py에서 /audit_project/<project_id>로 감사 실행, GitHub에 결과 저장.

🚀 3단계: 감사 기능 구현 (Flutter는 결과 표시만)
Flutter:
audit_report_screen.dart에서 AI 분석 결과 표시.
🚀 4단계: 대시보드 & 파일 탐색기 모드
Flutter:
file_explorer_screen.dart: 트리뷰 기반 파일 탐색기.

📍 9. 결론
Flutter 앱은 디스플레이 역할로 제한되며, Flask 서버에서 모든 프로젝트 감사를 수행하고, 
GitHub에 결과를 저장합니다. Flutter는 Flask API 또는 GitHub에서 데이터를 가져와 표시하며, 
오프라인 모드도 지원합니다. 

2025.4.2일 MCP연동
Smithery는 MCP 서버를 모아둔 사이트 입니다. Smithery에서 GitHub로 검색하면 @smithery-ai/github의 GitHub를 클릭합니다.
npx -y @smithery/cli@latest install @smithery-ai/github --client cursor --key b599f73c-b119-428a-9895-1ebbdacc6689