1. 전체 시스템 개요
목표:
부서, 사업번호, 폴더/파일명 정보를 기반으로 CSV 파일에서 데이터를 읽고, 지정된 문서(착수계, 계약서, 과업지시서 등)의 존재 여부를 확인한 후, 
필요 시 AI를 통해 추가 검증을 수행합니다. 또한, 디스코드 등 외부 채널을 통해 결과를 출력할 수 있도록 합니다.

### 핵심 실행순서
1) 최신 계약정보를 다운로드 후 정리, 추가A,B 등 삭제
2) get_data.py, 네트워크드라이브의 프로젝트폴더리스트 정리( 사업번호별로 1개의 !!!!!!! 폴더만으로 정리, 주관부서것만 남김)
3) search_project_data.py 각 폴더(프로젝트리스트)를 검색해서 문서가 있는지 검색,json으로 검색결과 저장
4) 검색,분석보고서,총괄집계 등 개별모듈을  호출해서 감사결과를 산출하는 주 실행모듈

## 폴더구조

# my-folder-app
|   .env
|   .gitignore
|   app.py
|   bot.py
|   folder.txt
|   README.md
|   requirements.txt
|   tree.txt
|   
+---.idx
+---.venv : python 3.12
|           
+---my-flask-app
|   |   audit_service.py # 감사를 하기 위한 마스터 파이썬 모듈
|   |   audit_target_generator.py  # 감사를 위한 타겟 프로젝트을 추출해서 리스트를 만듬
|   |   config.py  # 설정 모듈
			# Google API 설정
			GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY', '')

			# 프로젝트 루트 경로
			PROJECT_ROOT = os.path.abspath(os.path.dirname(os.path.dirname(__file__)))
			STATIC_DATA_PATH = os.path.join(PROJECT_ROOT, 'static', 'data')
			STATIC_IMAGES_PATH = os.path.join(PROJECT_ROOT, 'static', 'images')
			PROJECT_LIST_CSV = os.path.join(STATIC_DATA_PATH, 'project_list.csv')
			DEPART_LIST_PATH = os.path.join(STATIC_DATA_PATH, 'depart_list.csv')
			AUDIT_TARGETS_CSV = os.path.join(STATIC_DATA_PATH, 'audit_targets.csv')  # 감사 대상 CSV 경로 추가
			CONTRACT_STATUS_CSV = os.path.join(STATIC_DATA_PATH, 'contract_status.csv')

			# 네트워크 드라이브 설정 (캐싱)
			_NETWORK_DRIVE_CACHE = None
			_PATH_CACHE = {}

			def get_network_drive(verbose=False):
				"""사용 가능한 네트워크 드라이브 찾기 (캐싱 적용)"""
				global _NETWORK_DRIVE_CACHE
				
				if _NETWORK_DRIVE_CACHE is not None:
					return _NETWORK_DRIVE_CACHE

				# 기본값 설정
				_NETWORK_DRIVE_CACHE = 'Z:'
				
				if verbose:
					drives = ['Z:', 'Y:', 'X:', 'U:']
					for drive in drives:
						try:
							if os.path.exists(drive):
								_NETWORK_DRIVE_CACHE = drive
								logger.debug(f"Found network drive: {drive}")
								break
						except Exception:
							continue
					
					if _NETWORK_DRIVE_CACHE == 'Z:':
						logger.warning("No network drive found, using default Z:")
				
				return _NETWORK_DRIVE_CACHE

			def get_full_path(relative_path, check_exists=False, verbose=False):
				"""상대 경로를 절대 경로로 변환하되, 네트워크 조회를 최소화"""
				if not relative_path:
					return None
				
				cache_key = str(relative_path)
				if cache_key in _PATH_CACHE:
					return _PATH_CACHE[cache_key]
				
				drive = get_network_drive(verbose=False)  # verbose를 False로 고정
				
				if ':' in relative_path:
					_, path = relative_path.split(':', 1)
					full_path = f"{drive}{path}"
				else:
					full_path = os.path.join(drive, relative_path)

				# 경로 정규화 (실제 파일 시스템 접근 없이)
				full_path = str(Path(full_path))
				
				# 네트워크 드라이브 확인 최소화
				if check_exists and verbose:  # check_exists가 True이고 verbose가 True일 때만 확인
					if not os.path.exists(full_path):
						logger.warning(f"Path does not exist: {full_path}")

				_PATH_CACHE[cache_key] = full_path
				if verbose:
					logger.debug(f"Converted path: {relative_path} -> {full_path}")
				
				return full_path

			def clear_path_cache():
				"""경로 캐시 초기화"""
				global _PATH_CACHE, _NETWORK_DRIVE_CACHE
				_PATH_CACHE = {}
				_NETWORK_DRIVE_CACHE = None
				logger.info("Path cache cleared")

			# 네트워크 드라이브 초기화 (시작 시 한 번만)
			NETWORK_BASE_PATH = get_network_drive()

			# Discord 설정
			DISCORD_BOT_TOKEN = os.getenv('DISCORD_BOT_TOKEN')
			DISCORD_CHANNEL_ID = int(os.getenv('DISCORD_CHANNEL_ID', '0'))
			DISCORD_WEBHOOK_URL = os.getenv('DISCORD_WEBHOOK_URL')
			GITHUB_TOKEN = os.getenv('GITHUB_TOKEN')



|   |   config_assets.py # 프로젝트의 분류를 하기 위한 설정
			# 폴더 스캔 설정
			SCAN_CONFIG = {
				'max_category_depth': 10,      # 깊은 트리 구조를 커버 (필요 시 조정)
				'sample_size': 3,             # 각 깊이에서 검사할 폴더 수
				'search_keywords': [          # 검색할 폴더 키워드
					# 문서 관련
					'설계', '보고서', '계획', '예산', '성과품', '문서', '파일',
					# 프로젝트 상태
					'준공', '완료', '진행', '착수',
					# 문서 유형별
					'계약', '과업', '협약', '실행', '도면',
					# 조직 관련
					'부서', '팀', '본부',
					# 기타
					'documents', 'files', 'reports', 'drawings'
				],
				'skip_patterns': [           # 검색 제외할 폴더 패턴
					'backup', '백업', 'old', '이전',
					'temp', '임시', 'test', '테스트',
					'archive', '보관', 'delete', '삭제'
				]
			}

			# 프로젝트 폴더 검색 설정
			FORCE_SCAN_CONFIG = {
				'deep_scan_keywords': [
					# 상태 키워드
					'진행', '완료', '준공', '준공프로젝트',
					# 업무 키워드
					'조사', '해외', '환경영향',
					# 조직 키워드
					'팀', '기타', '퇴사',
					# 부서 키워드
					'01. 도로, 공항부', '03. 구조부', '04. 지반부', '05. 교통부', '06. 안전진단부',
					'07. 철도설계부', '08. 철도건설관리부', '10. 도시계획부', '11. 도시설계부',
					'12. 조경부', '13. 수자원부', '15. 상하수도부', '16. 항만부', '17. 환경사업부',
					'18. 건설사업관리부'
				],
				'year_pattern': r'(?:199|20[0-2])\d'  # 1990~2029년 패턴
			}

			# 프로젝트 정보 추출 규칙
			PROJECT_INFO_PATTERNS = {
				'year_pattern': r'((?:199|20[0-2])\d)'  # 1990~2029년
			}

			# 검색 대상 문서 유형
			DOCUMENT_TYPES = {
				'contract': {'name': '계약서', 'keywords': ['계약서', '변경계약서', '계약', 'contract']},
				'specification': {'name': '과업지시서', 'keywords': ['과업지시', '과업', '내용서', 'specification']},
				'initiation': {'name': '착수계', 'keywords': ['착수', '착수계', 'initiation']},
				'agreement': {'name': '공동도급협정', 'keywords': ['분담', '협정', '협약', 'agreement']},    
				'budget': {'name': '실행예산', 'keywords': ['실행', '실행예산', 'budget']},
				'deliverable1': {'name': '성과품(보고서)', 'keywords': ['성과품', '성과', '보고서', '1장', 'deliverable1']},
				'deliverable2': {'name': '성과품(도면)', 'keywords': ['성과품', '성과', '도면', '일반도', '평면도', 'deliverable2']},
				'completion': {'name': '준공계', 'keywords': ['준공', '준공계', 'completion']},
				'certificate': {'name': '실적증명', 'keywords': ['실적증명', '증명', 'certificate']},
				'evaluation': {'name': '용역수행평가', 'keywords': ['용역수행평가', '용역수행', 'evaluation']}
			}

			# 부서 매핑 (PM부서 → department_code)
			DEPARTMENT_MAPPING = {
				'도로부': '01010',
				'상하수도부': '02010',
				'구조부': '01030',
				'도시계획부': '04010',
				'수성엔지니어링': '99999',  # 예비 부서 코드 (정확한 매핑 필요)
				'환경사업부': '06010',
				'수자원부': '07010',
				'안전진단부': '08010',
				'철도설계부': '09010',
				'건설사업관리부': '10010',
				'공항및인프라사업부': '01020',
				'플랫폼사업실': '11010',
				'항만부': '12010',
				'철도건설관리부': '13010',
				'도시철도부': '14010'
			}

			# 감사 대상 필터링 설정
			AUDIT_FILTERS = {
				'status': ['준공', '진행'],  # 진행 상태 필터 (다중 값 가능: '준공', '진행', '중지', '탈락')
											 # - '준공': 성과품 완벽히 포함해야 함 (주관사 100%, 비주관사 최소 필요)
											 # - '진행': 성과품 미완성 가능
											 # - '중지': 진행보다 미흡한 상태, 성과품 누락 가능
											 # - '탈락': 입찰 탈락, 감사 제외 가능
															 # 주관사 여부
															 # - '주관사': 모든 자료 완비 (100% 문서 필요)
															 # - '비주관사': 최소 필요 자료만 있음
				'year': [2024],  # 준공 연도 필터 (다중 값 가능, 최근 준공 프로젝트 감사)
				'department': None  # 기본값 없음, AUDIT_FILTERS_depart 참조
			}

			AUDIT_FILTERS_depart = [
				'01010',  # 도로부
				'06010',  # 환경사업부
				# '02010',  # 상하수도부
				# '01030',  # 구조부
				# '04010',  # 도시계획부
				# '07010',  # 수자원부
				# '08010',  # 안전진단부
				# '09010',  # 철도설계부
				# '10010',  # 건설사업관리부
				# '01020',  # 공항및인프라사업부
				# '11010',  # 플랫폼사업실
				# '12010',  # 항만부
				# '13010',  # 철도건설관리부
				# '14010'   # 도시철도부
			]

			# 부서 코드 → 부서명 한글 매핑
			DEPARTMENT_NAMES = {
				'01010': '도로부',
				'06010': '환경사업부',
				'02010': '상하수도부',
				'01030': '구조부',
				'04010': '도시계획부',
				'07010': '수자원부',
				'08010': '안전진단부',
				'09010': '철도설계부',
				'10010': '건설사업관리부',
				'01020': '공항및인프라사업부',
				'11010': '플랫폼사업실',
				'12010': '항만부',
				'13010': '철도건설관리부',
				'14010': '도시철도부'
			}

|   |   export_report.py
|   |   gemini.py  # 감사 결과를 AI로 분석
|   |   get_data.py # 감사 전 네트워크 드라이브에서 감사를 하기 위한 프로젝트 폴더를 추출하는 모듈
|   |   get_project.py # 프로젝트의 정보를 알아보기(디스코드 명령 "project 20240178")
|   |   git_operations.py # 파일 자동 푸시, 업로드
|   |   search_project_data.py # 네트워크 드라이브에 있는 프로젝트 폴더에서 문서를 검색(컨피그에 있는 문서와 매치되는 문서가 있는 지 검색)
|   |   
|   \---__pycache__
|           
+---my_flutter_app : 플러터앱과 연결(장래 플랜)
+---Noto_Sans_KR : 한글 글꼴
|   |   NotoSansKR-VariableFont_wght.ttf
|   |   OFL.txt
|   |   README.txt
|   |   
|   \---static
|           NotoSansKR-Black.ttf
|           
+---static
|   +---data
|   |   |   audit_results.csv : 감사할 대상 리스트
|   |   |   audit_targets_new.csv
				Depart_ProjectID,Depart,Status,Contractor,ProjectName
				06010_C20240178,환경사업부,진행,주관사,"월곶~판교 복선전철 건설사업(제2~5, 7, 9~10공구) 사후환경영향조사용역"

|   |   |   contract_status.csv(계약사업리스트 현황, 예: C20240179, 접미사는 R연구, C일반, B사전, A지원사업, 추가계약에 따라 C20240179

			사업코드,사업명,사업구분,국내외구분,발주처,PM부서,발주방법,등록구분,진행상태,공동도급사,계약일자,변경준공일(차수),주관사
			R20240001,스마트시티 혁신기술 발굴사업(자율주행 운전패턴 하이브리드형 아스팔트 보강재),감리,국내,국토교통과학기술진흥원,건설사업관리부,설계시공분리발주,본사업,준공,"군산대학교 산학협력단(41.47), 하나 테크(39.28), (주)에스엔건설(9.87), ㈜수성엔지니어링(9.38)",2023-11-20,2024-06-20,비주관사
			C20240179,서울도시철도7호선 청라국제도시연장 추가정거장(005-1) 건설공사 기술제안 입찰용역,설계,국내,동부건설㈜,구조부,설계시공일괄발주(T/K),본사업,진행,"동부엔지니어링㈜(52.2), ㈜건화(28.6), ㈜수성엔지니어링(19.2)",2024-08-27,2024-11-09,비주관사
			C20240178B,"월곶~판교 복선전철 건설사업(제2~5, 7, 9~10공구) 사후환경영향조사용역_추가B",설계,국내,유연이앤씨,환경사업부,기타,지분차액,진행,㈜수성엔지니어링(100),2025-01-24,2032-07-31,주관사
			C20240178A,"월곶~판교 복선전철 건설사업(제2~5, 7, 9~10공구) 사후환경영향조사용역_추가A",설계,국내,㈜예평이앤씨,환경사업부,기타,지분차액,진행,㈜수성엔지니어링(100),2025-01-24,2032-07-31,주관사
			C20240178,"월곶~판교 복선전철 건설사업(제2~5, 7, 9~10공구) 사후환경영향조사용역",설계,국내,국가철도공단,환경사업부,설계시공분리발주,본사업,진행,"㈜수성엔지니어링(39.52), 주식회사 세울엔지니어링(20.98), ㈜예평이앤씨(19.75), 유연이앤씨(19.75)",2024-08-20,2024-12-31,주관사


|   |   |   depart_list.csv(넷트워크 드라이브에 있는 프로젝트 폴더의 부서구분현황,예: 01010_도로)

			department_code,department_name
			01010,도로
			01020,공항인프라
			01030,구조
			01040,지반
			01050,교통
			01060,안전진단
			02010,도시철도
			03010,철도
			03020,철도건설관리
			04010,도시계획
			04020,도시설계
			04030,조경
			05010,수자원
			06010,환경
			07010,상하수도
			07010,항만
			08010,건설사업관리
			09010,해외영업
			10010,플랫폼사업실
			11010,기술지원실
			99999,준공

|   |   |   project_list.csv 넷트워크 드라이브에 있는 프로젝트 폴더를 검색하여 정리한 리스트(드라이브명은 네트워크접속시 변경될 수 있으므로 별도 관리)

			department_code,department_name,project_id,project_name,original_folder
			01010,도로,20180076,20180076_영락공원 진입도로 개설공사 외 4개소 기본 및 실시설계용역,01010_도로\20180076_영락공원 진입도로 개설공사 외 4개소 기본 및 실시설계용역
			06010,환경,20240178,"20240178ㅣ월곶_판교 복선전철 건설사업(제2_5, 7, 9_10공구) 사후환경영향조사용역","06010_환경\2팀\02.사후환경영향조사\20240178ㅣ월곶_판교 복선전철 건설사업(제2_5, 7, 9_10공구) 사후환경영향조사용역"



|   |   |   
|   +---images
|   |       
|   +---projects
|   |       01010_20180019.json
				{
				  "project_id": "20180019",
				  "department_code": "01010",
				  "department_name": "도로",
				  "project_name": "C2018019 Ethiopia 고레-마샤-테피 도로 디자인 빌드 프로젝트 개념설계 및 감리",
				  "project_path": "Z:01010_도로\\0004 해외사업\\C2018019 Ethiopia 고레-마샤-테피 도로 디자인 빌드 프로젝트 개념설계 및 감리",
				  "documents": {
					"contract": [
					  {
						"type": "file",
						"name": "변경 계약서.pdf",
						"path": "변경 계약서.pdf",
						"full_path": "Z:01010_도로\\0004 해외사업\\C2018019 Ethiopia 고레-마샤-테피 도로 디자인 빌드 프로젝트 개념설계 및 감리\\1. 과업 계약 및 착수\\1.01 계약\\변경 계약서.pdf",
						"depth": 2,
						"doc_type": "contract"
					  },

|   |       01010_20180076.json
|   |       
|   +---report
|   \---results
|           audit_01010_20180019.json
				{
				  "project_id": "20180019",
				  "department": "01010_도로",
				  "department_code": "01010",
				  "department_name": "도로",
				  "project_name": "C2018019 Ethiopia 고레-마샤-테피 도로 디자인 빌드 프로젝트 개념설계 및 감리",
				  "project_path": "Z:01010_도로\\0004 해외사업\\C2018019 Ethiopia 고레-마샤-테피 도로 디자인 빌드 프로젝트 개념설계 및 감리",
				  "documents": {
					"contract": {
					  "exists": true,
					  "details": [
						{
						  "type": "file",
						  "name": "변경 계약서.pdf",
						  "path": "변경 계약서.pdf",
						  "full_path": "Z:01010_도로\\0004 해외사업\\C2018019 Ethiopia 고레-마샤-테피 도로 디자인 빌드 프로젝트 개념설계 및 감리\\1. 과업 계약 및 착수\\1.01 계약\\변경 계약서.pdf",
						  "depth": 2,
						  "doc_type": "contract"
						},

|           audit_01010_20180076.json
|           
+---templates
+---test



플라스크 서버의 역할:

API 엔드포인트 제공
파일 기반 데이터(CSV) 처리
주기적 스케줄링 작업을 통해 데이터 업데이트 및 문서 확인 처리
외부 모듈과의 연동(예: Discord 봇)
2. 주요 파일 및 역할
get_data.py

CSV 파일(static 폴더 내)을 읽어 부서, 사업번호, 폴더명, 파일명 등의 정보를 파싱합니다.
데이터 구조가 단순하므로 Pandas 또는 csv 모듈을 활용할 수 있습니다.


search_project_data.py


특정 문서(착수계, 계약서, 과업지시서 등)가 해당 CSV 데이터에 존재하는지 여부를 확인하는 로직을 구현합니다.
파일명, 폴더명, 사업번호 등 조건에 따른 필터링 기능 포함.


gemini.py

문서가 존재할 경우, AI 모듈을 호출하여 문서의 작성 내용, 품질, 형식 등을 자동으로 검증합니다.
AI 결과를 반환하고, 필요에 따라 추가 후처리 로직을 구현합니다.
app.py

플라스크 서버의 메인 진입점입니다.
API 엔드포인트를 정의하고, 외부 요청에 따라 get_data, get_compare, gemini 기능을 연계하여 동작시킵니다.
스케줄링 기능: Flask 내에서 Flask-APScheduler와 같은 라이브러리를 활용해 주기적인 데이터 체크, 문서 확인 등의 작업을 통합 관리합니다.


bot.py

Discord 등 외부 메신저와의 연동을 담당합니다.
플라스크 서버에서 처리한 결과를 외부 채널로 출력하는 기능을 구현합니다.
웹훅 또는 API를 통해 메시지 전송 방식 선택.


3. 추가 제안 파일 및 모듈
개발 초기에는 플라스크 서버와 CSV 파일 기반 데이터 관리로 충분하겠지만, 장기적으로 고려할 수 있는 파일은 아래와 같습니다:

config.py
- 현재 검색할 로컬폴더 : Y:\ ..
- 현재 검색할 폴더,파일명 : 
  1) 설계행정 : 계약서, 과업지지서, 착수계, 공동도급협정, 실행예산, 성과품, 최종성과품, 준공계, 용역수행평가, 실적증명
  2) 기술지원 : 기술지원 계약서, 과업지시서, 사책 사인, 안전관리관리
  3) 품질관리 : 체크리스트, 기술지원실
  4) 건설사업관리 : 계약서, 착수계, 공동도급협정, 준공계, 성과품, 용역수행평가, 실적증명, 현장행정, 설계자료, 기술검토



4. 개발 단계 및 일정
초기 설계 및 모듈 분리:

각 기능(데이터 파싱, 문서 확인, AI 검증, 봇 연동)을 모듈화하여 독립적으로 테스트 가능한 구조로 설계
개발 단계:

config.py : 기본 설정 화일
get_data.py: CSV 파싱 및 데이터 구조 정의
seach_project_data.py : 프로젝트 폴더에서 적정 문서가 작성되어 있는지 폴더명, 파이명 등으로 확인
gemini.py: AI 모듈 연동 및 결과 처리 로직 구현
app.py: 플라스크 서버 구성 및 API 엔드포인트 정의, 스케줄링 기능 추가
bot.py: 외부 채널(Discord)과 연동하는 메시지 전송 로직 구현

자, 이렇게 하자
1) 감사대상을 선정하는 것을 컨피그에 설정하자
2) 추출하는 모듈 "get_audit_selected.py" 더 명확한 이름을 니가 제안해줘
    
3) audit_service.py 에서 
컨피그 감사대상 설정 인수를 읽어서 오딧에서 겟오딧설렉티드를 호출하고, csv로 저장(나중에 단독 실행할 수 있게) 
4) csv를 읽어서 오딧할 대상을 감사하는거야
