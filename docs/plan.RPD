1. 전체 시스템 개요
목표:
부서, 사업번호, 폴더/파일명 정보를 기반으로 CSV 파일에서 데이터를 읽고, 지정된 문서(착수계, 계약서, 과업지시서 등)의 존재 여부를 확인한 후, 
필요 시 AI를 통해 추가 검증을 수행합니다. 또한, 디스코드 등 외부 채널을 통해 결과를 출력할 수 있도록 합니다.

플라스크 서버의 역할:

API 엔드포인트 제공
파일 기반 데이터(CSV) 처리
주기적 스케줄링 작업을 통해 데이터 업데이트 및 문서 확인 처리
외부 모듈과의 연동(예: Discord 봇)
2. 주요 파일 및 역할
get_data.py

CSV 파일(static 폴더 내)을 읽어 부서, 사업번호, 폴더명, 파일명 등의 정보를 파싱합니다.
데이터 구조가 단순하므로 Pandas 또는 csv 모듈을 활용할 수 있습니다.


search_project_data.py


특정 문서(착수계, 계약서, 과업지시서 등)가 해당 CSV 데이터에 존재하는지 여부를 확인하는 로직을 구현합니다.
파일명, 폴더명, 사업번호 등 조건에 따른 필터링 기능 포함.


gemini.py

문서가 존재할 경우, AI 모듈을 호출하여 문서의 작성 내용, 품질, 형식 등을 자동으로 검증합니다.
AI 결과를 반환하고, 필요에 따라 추가 후처리 로직을 구현합니다.
app.py

플라스크 서버의 메인 진입점입니다.
API 엔드포인트를 정의하고, 외부 요청에 따라 get_data, get_compare, gemini 기능을 연계하여 동작시킵니다.
스케줄링 기능: Flask 내에서 Flask-APScheduler와 같은 라이브러리를 활용해 주기적인 데이터 체크, 문서 확인 등의 작업을 통합 관리합니다.


bot.py

Discord 등 외부 메신저와의 연동을 담당합니다.
플라스크 서버에서 처리한 결과를 외부 채널로 출력하는 기능을 구현합니다.
웹훅 또는 API를 통해 메시지 전송 방식 선택.


3. 추가 제안 파일 및 모듈
개발 초기에는 플라스크 서버와 CSV 파일 기반 데이터 관리로 충분하겠지만, 장기적으로 고려할 수 있는 파일은 아래와 같습니다:

config.py
- 현재 검색할 로컬폴더 : Y:\ ..
- 현재 검색할 폴더,파일명 : 
  1) 설계행정 : 계약서, 과업지지서, 착수계, 공동도급협정, 실행예산, 성과품, 최종성과품, 준공계, 용역수행평가, 실적증명
  2) 기술지원 : 기술지원 계약서, 과업지시서, 사책 사인, 안전관리관리
  3) 품질관리 : 체크리스트, 기술지원실
  4) 건설사업관리 : 계약서, 착수계, 공동도급협정, 준공계, 성과품, 용역수행평가, 실적증명, 현장행정, 설계자료, 기술검토



4. 개발 단계 및 일정
초기 설계 및 모듈 분리:

각 기능(데이터 파싱, 문서 확인, AI 검증, 봇 연동)을 모듈화하여 독립적으로 테스트 가능한 구조로 설계
개발 단계:

config.py : 기본 설정 화일
get_data.py: CSV 파싱 및 데이터 구조 정의
seach_project_data.py : 프로젝트 폴더에서 적정 문서가 작성되어 있는지 폴더명, 파이명 등으로 확인
gemini.py: AI 모듈 연동 및 결과 처리 로직 구현
app.py: 플라스크 서버 구성 및 API 엔드포인트 정의, 스케줄링 기능 추가
bot.py: 외부 채널(Discord)과 연동하는 메시지 전송 로직 구현
